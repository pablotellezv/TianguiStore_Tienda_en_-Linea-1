# üìç **Puerto del servidor Express**
# Define el puerto en el que el servidor Express escuchar√° las peticiones HTTP. 
# Si no se define en este archivo, el servidor usar√° el puerto 3000 por defecto.
# Puedes configurarlo en tu entorno o establecer otro puerto espec√≠fico si lo necesitas.
PORT=3000

# üíª **Configuraci√≥n de la base de datos MySQL**
# Aqu√≠ se definen los par√°metros necesarios para la conexi√≥n con tu base de datos MySQL.
# Aseg√∫rate de tener configurados correctamente estos valores seg√∫n tu entorno.

# **DB_HOST**: Direcci√≥n del host de la base de datos (por defecto es localhost, pero puede ser una IP o un nombre de dominio si la base de datos est√° en un servidor remoto).
# **DB_PORT**: Puerto de la base de datos MySQL (por defecto es 3306, si tu base de datos usa otro puerto, config√∫ralo aqu√≠).
# **DB_USER**: Usuario de la base de datos con permisos suficientes para realizar operaciones.
# **DB_PASSWORD**: Contrase√±a del usuario de la base de datos. Si es una base de datos local con MySQL predeterminado, puedes configurarla aqu√≠.
# **DB_NAME**: Nombre de la base de datos a la que se debe conectar la aplicaci√≥n.
# Si alguna de estas variables no est√° definida, el sistema fallar√° en la conexi√≥n a la base de datos, as√≠ que aseg√∫rate de configurarlas adecuadamente.

DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=mysql
DB_NAME=papelerianuevo

# üõ°Ô∏è **JWT - Access Token**
# **JWT_SECRET**: Clave secreta utilizada para firmar los Access Tokens. Es fundamental que esta clave sea segura y aleatoria.
# **JWT_EXPIRES_IN**: Tiempo de expiraci√≥n del Access Token. Por defecto, est√° configurado para 1 d√≠a. Puedes ajustarlo seg√∫n tus necesidades.
# Estos valores son utilizados para gestionar la autenticaci√≥n de usuarios. El Access Token es usado para autenticar solicitudes de los usuarios.

JWT_SECRET="clave_super_segura_para_tianguistore"  # Cambiar a una clave secreta m√°s segura y aleatoria en producci√≥n
JWT_EXPIRES_IN="1d"  # Tiempo de expiraci√≥n del Access Token

# üîÑ **JWT - Refresh Token**
# **JWT_REFRESH_SECRET**: Clave secreta utilizada para firmar los Refresh Tokens. Debe ser diferente de `JWT_SECRET` y tambi√©n segura.
# **JWT_REFRESH_EXPIRES_IN**: Tiempo de expiraci√≥n del Refresh Token. Por defecto est√° configurado para 7 d√≠as.
# El Refresh Token permite obtener un nuevo Access Token cuando este haya expirado, proporcionando una autenticaci√≥n continua.

JWT_REFRESH_SECRET="clave_aun_mas_segura_para_refresh_tianguistore"  # Cambiar a una clave secreta m√°s segura y aleatoria en producci√≥n
JWT_REFRESH_EXPIRES_IN="7d"  # Tiempo de expiraci√≥n del Refresh Token

# üåê **Frontend URL**
# **FRONTEND_URL**: URL de tu aplicaci√≥n frontend, utilizada para redirigir usuarios a la interfaz, especialmente durante el proceso de recuperaci√≥n de contrase√±as.
# Aseg√∫rate de que esta URL est√© configurada correctamente seg√∫n el entorno en el que est√©s trabajando (por ejemplo, `https://tianguistore.mx` o en un entorno local `http://localhost:3000`).

FRONTEND_URL="https://tianguistore.mx"  # Actualiza con la URL de tu frontend

# üìß **Configuraci√≥n de Correo Electr√≥nico**
# Si tu aplicaci√≥n necesita enviar correos electr√≥nicos (por ejemplo, para recuperaci√≥n de contrase√±as), debes configurar un servicio de correo SMTP.
# Las siguientes variables son necesarias para la autenticaci√≥n con el servicio SMTP y el env√≠o de correos.

# **EMAIL_USER**: Direcci√≥n de correo electr√≥nico desde la que se enviar√°n los correos.
# **EMAIL_PASS**: Contrase√±a o "App Password" del correo electr√≥nico utilizado para el env√≠o. Se recomienda usar contrase√±as de aplicaci√≥n si usas autenticaci√≥n en dos pasos.
# Si no usas un servicio SMTP, puedes omitir estas variables.

EMAIL_USER="your-email@example.com"  # Direcci√≥n de correo electr√≥nico que enviar√° los mensajes
EMAIL_PASS="your-email-password"  # Contrase√±a de la cuenta de correo o "App Password" (recomendado usar contrase√±as de aplicaci√≥n espec√≠ficas)

# ‚õî **NOTA IMPORTANTE**:
# Aseg√∫rate de que las claves secretas de JWT y la contrase√±a de la base de datos no se compartan p√∫blicamente ni se suban a repositorios.
# Es recomendable usar herramientas de gesti√≥n de secretos o servicios como AWS Secrets Manager, Vault, o incluso variables de entorno en tu servidor para mantener estas claves seguras.
# Adem√°s, se recomienda cambiar las contrase√±as predeterminadas en entornos de producci√≥n.
